{"version":3,"file":"main.310f7107778b80ec8a2b.bundle.js","sources":["webpack:///./stories/examples/react-autosuggest.js"],"sourcesContent":["/* global XMLHttpRequest */\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Autosuggest from 'react-autosuggest'\nimport match from 'autosuggest-highlight/match'\nimport parse from 'autosuggest-highlight/parse'\nimport Paper from '@material-ui/core/Paper'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { withStyles } from '@material-ui/core/styles'\nimport ChipInput from '../../src/ChipInput'\n\nconst suggestions = [\n  { name: 'Afghanistan' },\n  { name: 'Aland Islands' },\n  { name: 'Albania' },\n  { name: 'Algeria' },\n  { name: 'American Samoa' },\n  { name: 'Andorra' },\n  { name: 'Angola' },\n  { name: 'Anguilla' },\n  { name: 'Antarctica' },\n  { name: 'Antigua and Barbuda' },\n  { name: 'Argentina' },\n  { name: 'Armenia' },\n  { name: 'Aruba' },\n  { name: 'Australia' },\n  { name: 'Austria' },\n  { name: 'Azerbaijan' },\n  { name: 'Bahamas' },\n  { name: 'Bahrain' },\n  { name: 'Bangladesh' },\n  { name: 'Barbados' },\n  { name: 'Belarus' },\n  { name: 'Belgium' },\n  { name: 'Belize' },\n  { name: 'Benin' },\n  { name: 'Bermuda' },\n  { name: 'Bhutan' },\n  { name: 'Bolivia, Plurinational State of' },\n  { name: 'Bonaire, Sint Eustatius and Saba' },\n  { name: 'Bosnia and Herzegovina' },\n  { name: 'Botswana' },\n  { name: 'Bouvet Island' },\n  { name: 'Brazil' },\n  { name: 'British Indian Ocean Territory' },\n  { name: 'Brunei Darussalam' }\n]\n\nfunction renderInput (inputProps) {\n  const { value, onChange, chips, ref, ...other } = inputProps\n\n  return (\n    <ChipInput\n      clearInputValueOnChange\n      onUpdateInput={onChange}\n      value={chips}\n      inputRef={ref}\n      {...other}\n    />\n  )\n}\n\nfunction renderSuggestion (suggestion, { query, isHighlighted }) {\n  const matches = match(suggestion.name, query)\n  const parts = parse(suggestion.name, matches)\n\n  return (\n    <MenuItem\n      selected={isHighlighted}\n      component='div'\n      onMouseDown={(e) => e.preventDefault()} // prevent the click causing the input to be blurred\n    >\n      <div>\n        {parts.map((part, index) => {\n          return part.highlight ? (\n            <span key={String(index)} style={{ fontWeight: 500 }}>\n              {part.text}\n            </span>\n          ) : (\n            <span key={String(index)}>\n              {part.text}\n            </span>\n          )\n        })}\n      </div>\n    </MenuItem>\n  )\n}\n\nfunction renderSuggestionsContainer (options) {\n  const { containerProps, children } = options\n\n  return (\n    <Paper {...containerProps} square>\n      {children}\n    </Paper>\n  )\n}\n\nfunction getSuggestionValue (suggestion) {\n  return suggestion.name\n}\n\nfunction getSuggestions (value) {\n  const inputValue = value.trim().toLowerCase()\n  const inputLength = inputValue.length\n  let count = 0\n\n  return inputLength === 0\n    ? []\n    : suggestions.filter(suggestion => {\n      const keep =\n          count < 5 && suggestion.name.toLowerCase().slice(0, inputLength) === inputValue\n\n      if (keep) {\n        count += 1\n      }\n\n      return keep\n    })\n}\n\nconst styles = theme => ({\n  container: {\n    flexGrow: 1,\n    position: 'relative'\n  },\n  suggestionsContainerOpen: {\n    position: 'absolute',\n    marginTop: theme.spacing.unit,\n    marginBottom: theme.spacing.unit * 3,\n    left: 0,\n    right: 0,\n    zIndex: 1\n  },\n  suggestion: {\n    display: 'block'\n  },\n  suggestionsList: {\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  },\n  textField: {\n    width: '100%'\n  }\n})\n\nclass ReactAutosuggest extends React.Component {\n  state = {\n    // value: '',\n    suggestions: [],\n    value: [],\n    textFieldInput: ''\n  };\n\n  handleSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    })\n  };\n\n  handleSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    })\n  };\n\n  handletextFieldInputChange = (event, { newValue }) => {\n    this.setState({\n      textFieldInput: newValue\n    })\n  };\n\n  handleAddChip (chip) {\n    if (this.props.allowDuplicates || this.state.value.indexOf(chip) < 0) {\n      this.setState(({ value }) => ({\n        value: [...value, chip],\n        textFieldInput: ''\n      }))\n    }\n  }\n\n  handleDeleteChip (chip, index) {\n    this.setState(({ value }) => {\n      const temp = value.slice()\n      temp.splice(index, 1)\n      return {\n        value: temp\n      }\n    })\n  };\n\n  render () {\n    const { classes, ...other } = this.props\n\n    return (\n      <Autosuggest\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderInputComponent={renderInput}\n        suggestions={this.state.suggestions}\n        onSuggestionsFetchRequested={this.handleSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.handleSuggestionsClearRequested}\n        renderSuggestionsContainer={renderSuggestionsContainer}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        onSuggestionSelected={(e, { suggestionValue }) => { this.handleAddChip(suggestionValue); e.preventDefault() }}\n        focusInputOnSuggestionClick={false}\n        inputProps={{\n          chips: this.state.value,\n          value: this.state.textFieldInput,\n          onChange: this.handletextFieldInputChange,\n          onAdd: (chip) => this.handleAddChip(chip),\n          onDelete: (chip, index) => this.handleDeleteChip(chip, index),\n          ...other\n        }}\n      />\n    )\n  }\n}\n\nReactAutosuggest.propTypes = {\n  allowDuplicates: PropTypes.bool,\n  classes: PropTypes.object.isRequired\n}\n\nexport const ReactAutosuggestExample = withStyles(styles)(ReactAutosuggest)\n\nclass ReactAutosuggestRemote extends React.Component {\n  state = {\n    // value: '',\n    suggestions: [],\n    value: [],\n    textFieldInput: ''\n  };\n\n  handleSuggestionsFetchRequested = ({ value }) => {\n    var oReq = new XMLHttpRequest()\n    var that = this\n    oReq.addEventListener('load', function () {\n      that.setState({\n        suggestions: oReq.status === 200 ? JSON.parse(this.responseText) : []\n      })\n    })\n    oReq.open('GET', 'https://restcountries.eu/rest/v2/name/' + value)\n    oReq.send()\n  };\n\n  handleSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    })\n  };\n\n  handletextFieldInputChange = (event, { newValue }) => {\n    this.setState({\n      textFieldInput: newValue\n    })\n  };\n\n  handleAddChip (chip) {\n    this.setState({ value: this.state.value.concat([chip]) })\n  }\n\n  handleDeleteChip (chip, index) {\n    const temp = this.state.value\n    temp.splice(index, 1)\n    this.setState({ value: temp })\n  }\n\n  render () {\n    const { classes, ...rest } = this.props\n\n    return (\n      <Autosuggest\n        theme={{\n          container: classes.container,\n          suggestionsContainerOpen: classes.suggestionsContainerOpen,\n          suggestionsList: classes.suggestionsList,\n          suggestion: classes.suggestion\n        }}\n        renderInputComponent={renderInput}\n        suggestions={this.state.suggestions}\n        onSuggestionsFetchRequested={this.handleSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.handleSuggestionsClearRequested}\n        renderSuggestionsContainer={renderSuggestionsContainer}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        onSuggestionSelected={(e, { suggestionValue }) => { this.handleAddChip(suggestionValue); e.preventDefault() }}\n        focusInputOnSuggestionClick\n        inputProps={{\n          classes,\n          chips: this.state.value,\n          onChange: this.handletextFieldInputChange,\n          value: this.state.textFieldInput,\n          onAdd: (chip) => this.handleAddChip(chip),\n          onDelete: (chip, index) => this.handleDeleteChip(chip, index),\n          ...rest\n        }}\n      />\n    )\n  }\n}\n\nReactAutosuggestRemote.propTypes = {\n  classes: PropTypes.object.isRequired\n}\nexport const ReactAutosuggestRemoteExample = withStyles(styles)(ReactAutosuggestRemote)\n"],"mappings":"AAWA","sourceRoot":""}